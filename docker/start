#!/usr/bin/env bash
# @knighttower - https://github.com/knighttower
# ------------------
# Docker Start Script
# ------------------

# DO NOT EDIT THIS FILE OR RUN IT DIRECTLY.
# --> Use it executing from the root directory of the project: npm run docker:start
# ------------------

rootDir="$(pwd)"
echo "$rootDir"
dockerDir="$rootDir/docker"
source "$dockerDir/helpers.sh"

# -----------------------------------------------------
# ----------------- Run the Start -----------------
# ------------------
# Copy the .env file
if [ -f "$rootDir/.env" ]; then
    echo -e "\e[32m ENV detected. ---->!\e[0m"
    echo -e "\e[33m Make sure the ENV has the VARS from the 'docker' env.example file...\e[0m"
else
    cp "$rootDir/docker/.env.example" "$rootDir/.env"
    echo -e "\e[32m ENV file created! ---->!\e[0m"
fi

# ------------------
# Copy the docker file
if [ -f "$rootDir/docker-compose.yml" ]; then
    echo -e "\e[32m Docker file detected. ---->!\e[0m"
else
    cp "$rootDir/docker/docker-compose.yml.template" "$rootDir/docker-compose.yml"
    echo -e "\e[32m Docker file created! ---->!\e[0m"
fi

# ------------------
# Run the docker command
dockerUser="$(getEnv DOCKER_USER)"
# Check if it is empty and set the default value if it is
# User and container will be the same. It avoid issues/confusions with permissions and allows easy access via bash cli.
if [ "$dockerUser" = "" ]; then
    dockerUser="flowise"
fi
echo -e "\e[32m Using dockerUser ----> $dockerUser!\e[0m"

# Check if docker is running
if testDockerRunning; then
    echo -e "\e[32mDocker is running.\e[0m"
else
    echo -e "\e[91mDocker is not running.\e[0m"
    echo -e "\e[91mDocker needs to be running to continue.\e[0m"

    echo -e "\e[91m Please confirm if docker is running...\e[0m"
    if promptConfirmation "is docker running?"; then
        if testDockerRunning; then
            echo -e "\e[32mDocker is running.\e[0m"
            break
        else
            echo -e "\e[91mDocker is not running.\e[0m"
            echo -e "\e[91mDocker needs to be running to continue.\e[0m"
        fi
    else
        echo -e "\e[91mInstallation aborted\e[0m"
        exit 1
    fi
fi

echo -e "\e[33m ---> STARTING DOCKER... Please wait...\e[0m"
docker-compose -p "$dockerUser" up -d
echo -e "\e[32m ===> READY TO GO! docker is running\n\e[0m"

echo -e "\e[33m ---> Running YARN stuff... Please wait...\n\n\e[0m"
sleep 1
docker exec -t $dockerUser bash -c 'yarn install && yarn build && yarn start'
echo -e "\e[32m ===> go to http://localhost:3000 \e[0m"
